#!groovy 

node ('master') {
    def maven = tool 'maven'

    stage('Parameterize') {
      if(!params.overwrite_parameters || "${params.overwrite_parameters}" == "Yes") {
        properties(
          [
            [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5']],
            [$class: 'ParametersDefinitionProperty', parameterDefinitions: [
              [$class: 'StringParameterDefinition', name: 'rpm_bucket', defaultValue: 'geowave-rpms', description: 'Bucket for rpms'],
              [$class: 'StringParameterDefinition', name: 'cache_bucket', defaultValue: 'geowave', description: 'Root GeoWave Bucket'],
              [$class: 'StringParameterDefinition', name: 'notebook_bucket', defaultValue: 'geowave-notebooks', description: 'Bucket for notebooks'],
              [$class: 'StringParameterDefinition', name: 'third_party_deps_path', defaultValue: 'https://s3.amazonaws.com/geowave/third-party-downloads', description: 'URL to third party downloads directory (No trailing slash)'],
              [$class: 'StringParameterDefinition', name: 'LOCAL_REPO_DIR', defaultValue: '/jenkins/gw-repo/snapshots', description: 'Path on the local filesystem to the repo'],
              [$class: 'StringParameterDefinition', name: 'build_type', defaultValue: 'clean install', description: 'Maven build type. To publish to central change to deploy. Credentials must be added.'],
              [$class: 'StringParameterDefinition', name: 'git_repo', defaultValue: 'https://github.com/locationtech/geowave.git', description: 'Repo to clone'],
              [$class: 'StringParameterDefinition', name: 'git_branch', defaultValue: 'master', description: 'Branch to build'],
              [$class: 'StringParameterDefinition', name: 'install4j_home', defaultValue: '/opt/install4j7/', description: 'Home directory of install4j, required if building standalone installers'],
              [$class: 'ChoiceParameterDefinition', name: 'overwrite_parameters', choices: 'No\nYes', description: 'Set to yes to reset parameters to defaults'],
              ]
            ],
            disableConcurrentBuilds(),
            pipelineTriggers([cron('@daily')])
          ]
        )
        currentBuild.result = 'ABORTED'
        error('Parameters Reset')
      }
    }

  // Setting java home for the withMaven block
  jdk = tool name: 'JDK18'
  env.JAVA_HOME = "${jdk}"

  // The following grabs the EC2 role from the instance for things like S3 Access
  stage('Retrieve Role From IAM'){
    sh """
      ROLE=`curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/`
      AWS_ACCESS_KEY_ID=`curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/\${ROLE} | awk '/AccessKeyId/ {print \$3}' | sed 's/[^0-9A-Z]*//g'`
      AWS_SECRET_ACCESS_KEY=`curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/\${ROLE} | awk '/SecretAccessKey/ {print \$3}' | sed 's/[^0-9A-Za-z/+=]*//g'`
      AWS_SESSION_TOKEN=`curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/\${ROLE} | awk '/Token/ {print \$3}' | sed 's/[^0-9A-Za-z/+=]*//g'`
      AWS_DEFAULT_REGION='us-east-1'
      M2_HOME='/var/jenkins_home/.m2'
      
      export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_DEFAULT_REGION M2_HOME
    """
  }

  stage('Wipe workspace'){
    deleteDir()
  }

  stage('Checkout'){
    // Checkout branch from github
    git branch: "${params.git_branch}", url: "${params.git_repo}"
  }
  // Mark the create docker image 'stage'
  stage('Create Docker Image'){
    // Build the docker container
    sh 'docker build -t locationtech/geowave-centos7-java8-build -f deploy/packaging/docker/geowave-centos7-java8-build.dockerfile deploy/packaging/docker'
    sh 'docker build -t locationtech/geowave-centos7-rpm-build -f deploy/packaging/docker/geowave-centos7-rpm-build.dockerfile deploy/packaging/docker'
    sh "docker build -t locationtech/geowave-centos7-publish -f deploy/packaging/docker/geowave-centos7-publish.dockerfile --build-arg third_party_deps_path=${ params.third_party_deps_path } deploy/packaging/docker"
  }

  stage('Maven Build/Deploy'){
    dir("${env.WORKSPACE}/docker-root") {
      sh """
        if [[ ! -z \$(aws s3api head-object --bucket ${params.cache_bucket} --key mvn-cache/mvn-repo-cache-latest.tar.gz) ]]; then
          aws s3 cp s3://${params.cache_bucket}/mvn-cache/mvn-repo-cache-latest.tar.gz . --quiet
          tar xfz mvn-repo-cache-latest.tar.gz
          rm mvn-repo-cache-latest.tar.gz
        fi
    """
    }
    withMaven(
      maven: 'maven',
      mavenLocalRepo: "${env.WORKSPACE}/docker-root/.m2/repository/",
      mavenOpts: "-Xmx2g -Xms1g",
      options: [junitPublisher(disabled: true), findbugsPublisher(disabled: true)]) {
      sh "mvn ${params.build_type} -DskipTests -Dspotbugs.skip -Dformatter.skip"
     }
  }
    
  stage('Clean bucket and local space'){
    // Local Cleanup - cleanup all but noarch directories
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev-jars/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release-jars/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev/SRPMS/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release/SRPMS/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev/TARBALL/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release/TARBALL/*"
    // S3 Cleanup
    sh "python deploy/scripts/clean-up.py ${env.WORKSPACE}"
  }
  
  // Mark the build artifacts 'stage'....
  stage('Build and Publish RPMs'){
    withEnv(["INSTALL4J_HOME=${ params.install4j_home }","LOCAL_REPO_DIR=${ params.LOCAL_REPO_DIR }","GEOWAVE_RPM_BUCKET=${ params.rpm_bucket }","GEOWAVE_BUCKET=${ params.cache_bucket }"]) {
    	sh "echo 'INSTALL4J_HOME=${INSTALL4J_HOME}'"
    	sh "echo 'params.install4j_home=${params.install4j_home}'"
        sh "deploy/packaging/docker/docker-build-rpms.sh"
    }
  }
  
  // Deploy to geowave-rpms
  stage('Deploying to S3'){
    def build_type = readFile('deploy/target/build-type.txt').trim()
    if ( build_type == "dev" ) {
      echo 'Build type determined as Dev.'
      sh "aws s3 sync --acl public-read ${params.LOCAL_REPO_DIR}/geowave/dev/ s3://${params.rpm_bucket}/dev/"
      sh "aws s3 sync --acl public-read ${params.LOCAL_REPO_DIR}/geowave/dev-jars/ s3://${params.rpm_bucket}/dev-jars/"
    } else if (build_type == "release" ) {
      echo 'Build type determined as Release.'
      sh "aws s3 sync --acl public-read ${params.LOCAL_REPO_DIR}/geowave/release/ s3://${params.rpm_bucket}/release/"
      sh "aws s3 sync --acl public-read ${params.LOCAL_REPO_DIR}/geowave/release-jars/ s3://${params.rpm_bucket}/release-jars/"
    } else {
      error("ERROR: Could not determine build type. Unable to upload rpm's.")
    }
  }

  stage('Bundle Maven Cache'){
    def build_type = readFile('deploy/target/build-type.txt').trim()
    if ( build_type == "dev" ) {
      dir("${env.WORKSPACE}/docker-root") {
        sh "tar czf ${env.WORKSPACE}/deploy/target/mvn-repo-cache-latest.tar.gz .m2"
        sh "aws s3 cp ${env.WORKSPACE}/deploy/target/mvn-repo-cache-latest.tar.gz s3://${params.cache_bucket}/mvn-cache/mvn-repo-cache-latest.tar.gz --quiet"
      }
    }
    else if (build_type == "release" ){
      def version  = readFile('deploy/target/version.txt').trim()
      dir("${env.WORKSPACE}/docker-root") {
        sh "tar czf ${env.WORKSPACE}/deploy/target/mvn-repo-cache-${version}.tar.gz .m2"
        sh "aws s3 cp ${env.WORKSPACE}/deploy/target/mvn-repo-cache-${version}.tar.gz s3://${params.cache_bucket}/mvn-cache/mvn-repo-cache-${version}.tar.gz --quiet"
      }
    } else {
      error("ERROR: Could not determine build type. Unable to upload maven cache")
    }
  }
  
  stage("Local cleanup") {
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev-jars/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release-jars/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev/SRPMS/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release/SRPMS/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/dev/TARBALL/*"
    sh "sudo rm -rf ${params.LOCAL_REPO_DIR}/geowave/release/TARBALL/*"
  }
}