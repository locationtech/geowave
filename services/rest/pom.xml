<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>geowave-service-parent</artifactId>
		<groupId>mil.nga.giat</groupId>
		<relativePath>../</relativePath>
		<version>0.9.8-SNAPSHOT</version>
	</parent>
	<properties>
		<restlet.version>2.4.0</restlet.version>
		<restservices.finalName>${project.artifactId}-${project.version}-restservices</restservices.finalName>
	</properties>
	<artifactId>geowave-service-rest</artifactId>
	<name>GeoWave Services Rest</name>
	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.restlet.jse</groupId>
			<artifactId>org.restlet</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.platform</artifactId>
			<version>${restlet.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.raml</groupId>
					<artifactId>raml-parser</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>javax.servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.fileupload</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.osgi</groupId>
			<artifactId>org.restlet.ext.swagger</artifactId>
			<version>${restlet.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.raml</groupId>
					<artifactId>raml-parser</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>javax.servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.1</version>
		</dependency>
		<dependency>
			<groupId>mil.nga.giat</groupId>
			<artifactId>geowave-datastore-accumulo</artifactId>
			<version>${project.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>javax.servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>javax.servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>mil.nga.giat</groupId>
			<artifactId>geowave-datastore-hbase</artifactId>
			<version>${project.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>servlet-api-2.5</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>mil.nga.giat</groupId>
			<artifactId>geowave-datastore-bigtable</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>mil.nga.giat</groupId>
			<artifactId>geowave-datastore-dynamodb</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>mil.nga.giat</groupId>
			<artifactId>geowave-datastore-cassandra</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.10</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
			<version>2.2.0.RELEASE</version>
		</dependency>
		<dependency>
   			<groupId>org.mockito</groupId>
   			<artifactId>mockito-all</artifactId>
   			<version>1.9.5</version>
   			<scope>test</scope>
		</dependency>
	</dependencies>
	<profiles>
		<profile>
			<id>rest-services-war</id>
			<dependencies>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-deploy</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-cli-geoserver</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-analytic-spark</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-analytic-mapreduce</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-adapter-raster</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-adapter-vector</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-4676</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-avro</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-gdelt</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-geolife</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-gpx</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-raster</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-tdrive</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-twitter</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>mil.nga.giat</groupId>
					<artifactId>geowave-format-vector</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>org.xerial</groupId>
					<artifactId>sqlite-jdbc</artifactId>
					<version>3.20.1</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<!-- Tomcat Maven Plugin is added to facilitate testing the webapp 
							without deploying to an actual server i.e. create a run config with tomcat7:run 
							as a goal -->
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<delegate>false</delegate>
							<path>/restservices</path>
							<useSeparateTomcatClassLoader>true</useSeparateTomcatClassLoader>
							<ignorePackaging>true</ignorePackaging>
						</configuration>
					</plugin>
					<plugin>
						<!-- we shade this jar so that spark and mapreduce can be launched 
							seamlessly -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>2.2</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<filters>
										<filter>
											<artifact>*:*</artifact>
											<excludes>
												<exclude>META-INF/*.SF</exclude>
												<exclude>META-INF/*.DSA</exclude>
												<exclude>META-INF/*.RSA</exclude>
												<exclude>log4j.properties</exclude>
											</excludes>
										</filter>
										<!-- these get included in the WAR so exclude them from the shaded 
											jar -->
										<filter>
											<artifact>mil.nga.giat:geowave-service-rest</artifact>
											<excludes>
												<exclude>**/*.xml</exclude>
												<exclude>**/*.properties</exclude>
											</excludes>
										</filter>
									</filters>
									<transformers>
										<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<manifestEntries>
												<Specification-Title>GeoWave-REST-Services</Specification-Title>
												<Specification-Vendor>LocationTech</Specification-Vendor>
												<Specification-Version>${project.version}</Specification-Version>
												<Implementation-Title>mil.nga.giat.geowave</Implementation-Title>
												<Implementation-Vendor>LocationTech</Implementation-Vendor>
												<Implementation-Version>${project.version}</Implementation-Version>
											</manifestEntries>
										</transformer>
										<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />

										<!-- merge various spring files -->
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/spring.handlers</resource>
										</transformer>
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/spring.schemas</resource>
										</transformer>
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/spring.provides</resource>
										</transformer>
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/spring.factories</resource>
										</transformer>

										<!-- merges META-INF/javax.media.jai.registryFile.jai entries instead 
											of overwriting -->
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/javax.media.jai.registryFile.jai</resource>
										</transformer>
										<!-- merges META-INF/registryFile.jai entries instead of overwriting -->
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/registryFile.jai</resource>
										</transformer>
										<!-- merges META-INF/registryFile.jaiext entries instead of overwriting -->
										<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
											<resource>META-INF/registryFile.jaiext</resource>
										</transformer>
									</transformers>
									<createDependencyReducedPom>false</createDependencyReducedPom>
									<minimizeJar>false</minimizeJar>
									<!-- write the shaded jar to WEB-INF/lib to stage for inclusion 
										in the war -->
									<outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/lib</outputDirectory>
									<finalName>${restservices.finalName}</finalName>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.3</version>
						<configuration>
							<!-- exclude all other jars other than the shaded jar, include xmls 
								and properties -->
							<packagingIncludes>WEB-INF/lib/${restservices.finalName}.jar,**/*.xml,**/*.properties</packagingIncludes>
							<warName>${restservices.finalName}</warName>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>war</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>