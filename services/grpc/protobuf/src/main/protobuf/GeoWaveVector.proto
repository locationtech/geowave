/*******************************************************************************
 * Copyright (c) 2013-2018 Contributors to the Eclipse Foundation
 * 
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License,
 * Version 2.0 which accompanies this distribution and is available at
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 ******************************************************************************/
syntax = "proto3";
import "GeoWaveReturnTypes.proto";
import "google/protobuf/timestamp.proto";
option java_multiple_files = true;
option java_package = "org.locationtech.geowave.service.grpc.protobuf";
option java_outer_classname = "VectorService";

// Interface exported by the server.
service Vector {
  // Ingest for vector data
  rpc VectorIngest(stream VectorIngestParameters) returns (stream StringResponse) {}

  // Standard query for accessing vector data
  rpc VectorQuery(VectorQueryParameters) returns (stream Feature) {}
  
  // The following are API-based queries that provide lower-level access for advanced users
  rpc CqlQuery(CQLQueryParameters) returns (stream Feature) {}
  rpc SpatialQuery(SpatialQueryParameters) returns (stream Feature) {}
  rpc SpatialTemporalQuery(SpatialTemporalQueryParameters) returns (stream Feature) {}
}

// Parameters for standard vector query
message VectorQueryParameters {
	string storeName = 1;	// required
	string typeName = 2;		// required
	string query = 3;		// required
}

// Base parameters needed to access data, adapter, and index stores
message VectorStoreParameters {
	string storeName = 1;	// required
	string indexName = 2;		// optional	
	string typeName = 3;		// optional
}

// A CQL query string to be executed by the server
message CQLQueryParameters {
  VectorStoreParameters baseParams = 1;
  string cql = 2;
}

message SpatialQueryParameters {
	VectorStoreParameters baseParams = 1;
	bytes geometry = 2;	//ISO 19107 Geometry binary definition (WKB)
}

message SpatialTemporalQueryParameters {
	SpatialQueryParameters spatialParams = 1;
	repeated TemporalConstraints temporalConstraints = 2;
	string compareOperation = 3;	//see org.locationtech.geowave.core.geotime.store.filter.SpatialQueryFilter.CompareOperation for enum values to use here
}

message VectorIngestParameters {
	VectorStoreParameters baseParams = 1;	//this should only be set on the first feature sent to the server
	map<string, FeatureAttribute> feature = 2;
}

//a feature in this case is just a map of string key value pairs (aka SimpleFeature)
message Feature {
	map<string, FeatureAttribute> attributes = 1;
}

message FeatureAttribute {
	string classType = 1;
	oneof value {
    string valString = 4;
    int32  valInt32 = 5;
    int64  valInt64 = 6;
    float  valFloat = 7;
    double valDouble = 8;
    //google.protobuf.Timestamp valDate = 9;
    bytes valGeometry = 10; //ISO 19107 Geometry binary definition (WKB)
  }
}

message TemporalConstraints {
	google.protobuf.Timestamp startTime = 1;
	google.protobuf.Timestamp endTime = 2;
}

