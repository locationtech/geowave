{
	"paragraphs": [
		{
			"text": "%md\n## Welcome to the GeoWave KMeans GDELT Example (EMR Version).\n##### This is a live note - you can run the code yourself.\n\n### Setup\n<p>\nThe only prerequisite to running this example is increasing your shell interpreter's timeout.<br>\nGo to the <b>Interpreter</b> page, and scroll down to the <b>'sh'</b> section. Click on the <b>'edit'</b> button.<br><br>\nSet the <b>'shell.command.timeout.millisecs'</b> entry to <b>600000</b> (10 minutes).\n</p>\n\n### Execution\n<p>\nThe list of paragraphs below needs to be run sequentially.<br>\nStart at the top, and click the <b>play</b> button in each paragraph, waiting for completion.<br>\nEach paragraph is labeled and commented so you can tell what's happening. A paragraph will be marked<br>\nwith a <b>FINISHED</b> indicator next to the play button when it has run without error.<br><br>\nEnjoy!\n</p>",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "markdown",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/markdown",
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "HTML",
						"data": "<h2>Welcome to the GeoWave KMeans GDELT Example (EMR Version).</h2>\n<h5>This is a live note - you can run the code yourself.</h5>\n<h3>Setup</h3>\n<p>\nThe only prerequisite to running this example is increasing your shell interpreter's timeout.<br>\nGo to the <b>Interpreter</b> page, and scroll down to the <b>'sh'</b> section. Click on the <b>'edit'</b> button.<br><br>\nSet the <b>'shell.command.timeout.millisecs'</b> entry to <b>600000</b> (10 minutes).\n</p>\n<h3>Execution</h3>\n<p>\nThe list of paragraphs below needs to be run sequentially.<br>\nStart at the top, and click the <b>play</b> button in each paragraph, waiting for completion.<br>\nEach paragraph is labeled and commented so you can tell what's happening. A paragraph will be marked<br>\nwith a <b>FINISHED</b> indicator next to the play button when it has run without error.<br><br>\nEnjoy!\n</p>\n"
					}
				]
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221596_1246962899",
			"id": "20170814-190601_1767735731",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"focus": true,
			"$$hashKey": "object:237"
		},
		{
			"text": "%sh\n# download the GDELT data\ncd /mnt/tmp\nwget s3.amazonaws.com/geowave/latest/scripts/emr/quickstart/geowave-env.sh\nsource geowave-env.sh\nmkdir gdelt\ncd gdelt\nwget http://data.gdeltproject.org/events/md5sums\nfor file in `cat md5sums | cut -d' ' -f3 | grep \"^${TIME_REGEX}\"` ; \\\ndo wget http://data.gdeltproject.org/events/$file ; done\nmd5sum -c md5sums 2>&1 | grep \"^${TIME_REGEX}\"\n",
			"user": "anonymous",
			"dateUpdated": "2017-09-13T08:46:09-0700",
			"config": {
				"colWidth": 12,
				"enabled": true,
				"results": {
				},
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"editorMode": "ace/mode/sh",
				"title": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317263426_-1605318615",
			"id": "20170913-084103_31433354",
			"dateCreated": "2017-09-13T08:41:03-0700",
			"status": "READY",
			"progressUpdateIntervalMs": 500,
			"focus": true,
			"$$hashKey": "object:1084",
			"title": "Get the Data"
		},
		{
			"title": "Configure GeoWave Datastores and Ingest Data",
			"text": "%sh\n# configure geowave connection params for hbase stores \"gdelt\" and \"kmeans\"\ngeowave config addstore gdelt --gwNamespace geowave.gdelt -t hbase --zookeeper $HOSTNAME:2181\ngeowave config addstore kmeans --gwNamespace geowave.kmeans -t hbase --zookeeper $HOSTNAME:2181\n\n# configure a spatial index\ngeowave config addindex -t spatial gdelt-spatial --partitionStrategy round_robin --numPartitions $NUM_PARTITIONS\n\n# run the ingest for a 10x10 deg bounding box over Europe\ngeowave ingest localtogw /mnt/tmp/gdelt gdelt gdelt-spatial -f gdelt \\\n--gdelt.cql \"BBOX(geometry, 0, 50, 10, 60)\"",
			"dateUpdated": "2017-09-13T08:52:38-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/sh",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221604_1231572943",
			"id": "20170809-181755_1512238840",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:238"
		},
		{
			"text": "%sh\n# set up geoserver\ngeowave config geoserver \"$HOSTNAME:8000\"\n\n# add gdelt layer to geoserver\ngeowave gs addlayer gdelt -id gdeltevent\n\n# enable subsampling on the gdelt layer\ncd /mnt/tmp\nwget s3.amazonaws.com/geowave/latest/scripts/emr/quickstart/SubsamplePoints.sld\ngeowave gs addstyle SubsamplePoints -sld /mnt/tmp/SubsamplePoints.sld\ngeowave gs setls gdeltevent --styleName SubsamplePoints\n",
			"user": "anonymous",
			"dateUpdated": "2017-09-13T08:50:29-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/sh",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317698274_-200588345",
			"id": "20170913-084818_2077241202",
			"dateCreated": "2017-09-13T08:48:18-0700",
			"status": "READY",
			"progressUpdateIntervalMs": 500,
			"focus": true,
			"$$hashKey": "object:1159",
			"title": "Configure GeoServer"
		},
		{
			"title": "Run KMeans on GDELT Subset",
			"text": "%sh\n# clear out potential old runs\ngeowave remote clear kmeans\n\n# run kmeans\ngeowave analytic kmeansspark gdelt kmeans -f gdeltevent --hulls --cqlFilter \"BBOX(geometry, 0, 50, 10, 60)\" -ch -ht myhulls -ct mycentroids\n",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/sh",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221605_1231188195",
			"id": "20170809-194032_1817638679",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:239"
		},
		{
			"title": "Add KMeans Results to GeoServer",
			"text": "%sh\n\n# add the centroids layer\ngeowave gs addlayer kmeans -id mycentroids\ngeowave gs setls mycentroids --styleName point\n\n# add the hulls layer\ngeowave gs addlayer kmeans -id myhulls\ngeowave gs setls myhulls --styleName line",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/sh",
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221606_1232342441",
			"id": "20170817-030121_1271873891",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:240"
		},
		{
			"text": "%angular\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n<h3>GeoWave Leaflet Map</h3>\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n\nfunction initMap() {\n    var map = L.map('map').setView([50.00, 10.00], 5);\n    \n    var host='ec2-52-55-84-142.compute-1.amazonaws.com';\n    mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    wholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';\n\n    var basemaps = {\n        OSM: L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n            maxZoom: 15,\n            minZoom: 2\n        }),\n        Satellite:L.tileLayer(\n            'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: '&copy; '+mapLink+', '+wholink,\n            maxZoom: 18,\n        }),\n        LANDSAT: L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:germany_mosaic',\n            format: 'image/jpeg'\n        })\n    };\n    \n    var overlays = {\n        GDELT:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:gdeltevent',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansCentroids:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:mycentroids',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansHulls:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:myhulls',\n            format: 'image/png',\n            transparent: true\n        })\n    };\n\n    L.control.layers(basemaps, overlays).addTo(map);\n    \n    basemaps.OSM.addTo(map);\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": true
				},
				"colWidth": 12,
				"editorMode": "ace/mode/undefined",
				"editorHide": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "ANGULAR",
						"data": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n<h3>GeoWave Leaflet Map</h3>\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n\nfunction initMap() {\n    var map = L.map('map').setView([50.00, 10.00], 5);\n    \n    var host='ec2-52-55-84-142.compute-1.amazonaws.com';\n    mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    wholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';\n\n    var basemaps = {\n        OSM: L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n            maxZoom: 15,\n            minZoom: 2\n        }),\n        Satellite:L.tileLayer(\n            'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: '&copy; '+mapLink+', '+wholink,\n            maxZoom: 18,\n        }),\n        LANDSAT: L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:germany_mosaic',\n            format: 'image/jpeg'\n        })\n    };\n    \n    var overlays = {\n        GDELT:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:gdeltevent',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansCentroids:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:mycentroids',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansHulls:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:myhulls',\n            format: 'image/png',\n            transparent: true\n        })\n    };\n\n    L.control.layers(basemaps, overlays).addTo(map);\n    \n    basemaps.OSM.addTo(map);\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"
					}
				]
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221607_1231957692",
			"id": "20170817-030613_874309201",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:241"
		},
		{
			"title": "Export KMeans Hulls to CSV",
			"text": "%sh\n# Set up the temp folder\ncd /mnt/tmp\nrm -rf kmeans\nmkdir kmeans\n\n# Query kmeans centroids and write to local temp file\ngeowave analytic sql \"select * from kmeans|myhulls\" --csv /mnt/tmp/kmeans\n\n# Move the csv output to hdfs\nmv kmeans/part*.csv mykmeans.csv\nhdfs dfs -rm /user/zeppelin/mykmeans.csv\nhdfs dfs -put mykmeans.csv /user/zeppelin/mykmeans.csv",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "sh",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/sh",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221608_1230033948",
			"id": "20170809-201803_119430460",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:242"
		},
		{
			"title": "Load KMeans Hull CSV into DataFrame",
			"text": "// load centroid data from hdfs\nval kmeansText = sc.textFile(\"/user/zeppelin/mykmeans.csv\")\n\ncase class KMeansRow(index: Int, count: Int, area: Double, density: Double)\n\n// split each line, filter out header (starts with \"geom\"), and map it into data class\nval kmeansData = kmeansText.map(s=>s.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\")).filter(s=>s(0)!=\"geom\").map(\n    s=>KMeansRow(s(1).toInt, s(2).toInt, s(3).toDouble, s(4).toDouble)\n)\n\n// send the results to the front end (Leaflet map)\nz.angularBind(\"pins\", kmeansData.collect())\n\n// register a view for SQL queries\nkmeansData.toDF().registerTempTable(\"kmeans\")\n",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "scala",
					"editOnDblClick": false
				},
				"colWidth": 12,
				"editorMode": "ace/mode/scala",
				"editorHide": false,
				"title": true,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221609_1229649199",
			"id": "20170814-174640_830156690",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:243"
		},
		{
			"title": "Display the KMeans Hulls Table",
			"text": "%sql\nselect * from kmeans order by density",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"editorSetting": {
					"language": "sql",
					"editOnDblClick": false
				},
				"colWidth": 8,
				"editorMode": "ace/mode/sql",
				"editorHide": false,
				"title": true,
				"results": {
					"0": {
						"graph": {
							"mode": "table",
							"height": 300,
							"optionOpen": false
						},
						"helium": {
						}
					}
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "TABLE",
						"data": "index\tcount\tarea\tdensity\n4\t115539\t2.0908055080757553E11\t5.526052019364286E-7\n5\t538828\t8.933931988110149E10\t6.0312525405063186E-6\n7\t1830244\t2.2347503902920425E10\t8.189925854586469E-5\n6\t749083\t1.0867836612952123E9\t6.892659750766351E-4\n3\t387962\t4.0115850428498507E8\t9.671040146375404E-4\n0\t212217\t4.432184030486991E7\t0.004788090894697854\n2\t1053522\t1.731963442166877E8\t0.006082818923024888\n1\t1088884\t4.008368251353978E7\t0.02716526855116638\n"
					}
				]
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221610_1230803446",
			"id": "20170809-203309_1972137502",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:244"
		},
		{
			"text": "%angular\r\n\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\r\n<h3>Client-side Integration</h3>\r\n<div id=\"map2\" style=\"height: 600px; width: 100%\"></div>\r\n\r\n<script type=\"text/javascript\">\r\nfunction initMap2() {\r\n    var map2 = L.map('map2').setView([52.5, 13.4], 11);\r\n\r\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n        maxZoom: 15,\r\n        minZoom: 2\r\n    }).addTo(map2);\r\n\r\n    var geoMarkers = L.layerGroup().addTo(map2);\r\n    var markerIcon = L.icon({\r\n        iconUrl: 'https://openstationmap.org/0.2.0/client/leaflet/images/marker-icon.png',\r\n        iconSize: [24, 32],\r\n    });\r\n\r\n    var el = angular.element($('#map2').parent('.ng-scope'));\r\n    angular.element(el).ready(function() {\r\n        window.pinWatcher = el.scope().compiledScope.$watch('pins', function(pinList, oldValue) {\r\n            geoMarkers.clearLayers();\r\n            angular.forEach(pinList, function(pin) {\r\n                var marker = L.marker([ pin.lat, pin.lon ], {icon: markerIcon})\r\n                  .bindPopup(pin.data)\r\n                  .addTo(geoMarkers);\r\n            });\r\n        })\r\n    });}\r\n\r\nif (window.pinWatcher) {\r\n    // clear existing watcher otherwise we'll have duplicates\r\n    window.pinWatcher();\r\n}\r\n\r\n// ensure we only load the script once, seems to cause issues otherwise\r\nif (window.L) {\r\n    initMap2();\r\n} else {\r\n    console.log('Loading Leaflet library');\r\n    var sc = document.createElement('script');\r\n    sc.type = 'text/javascript';\r\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\r\n    sc.onload = initMap2;\r\n    sc.onerror = function(err) { alert(err); }\r\n    document.getElementsByTagName('head')[0].appendChild(sc);\r\n}\r\n</script>",
			"dateUpdated": "2017-09-13T08:40:21-0700",
			"config": {
				"tableHide": false,
				"editorSetting": {
					"language": "text",
					"editOnDblClick": true
				},
				"colWidth": 8,
				"editorMode": "ace/mode/undefined",
				"editorHide": false,
				"results": {
				},
				"enabled": true
			},
			"settings": {
				"params": {
				},
				"forms": {
				}
			},
			"results": {
				"code": "SUCCESS",
				"msg": [
					{
						"type": "ANGULAR",
						"data": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\r\n<h3>Client-side Integration</h3>\r\n<div id=\"map2\" style=\"height: 600px; width: 100%\"></div>\r\n\r\n<script type=\"text/javascript\">\r\nfunction initMap2() {\r\n    var map2 = L.map('map2').setView([52.5, 13.4], 11);\r\n\r\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n        maxZoom: 15,\r\n        minZoom: 2\r\n    }).addTo(map2);\r\n\r\n    var geoMarkers = L.layerGroup().addTo(map2);\r\n    var markerIcon = L.icon({\r\n        iconUrl: 'https://openstationmap.org/0.2.0/client/leaflet/images/marker-icon.png',\r\n        iconSize: [24, 32],\r\n    });\r\n\r\n    var el = angular.element($('#map2').parent('.ng-scope'));\r\n    angular.element(el).ready(function() {\r\n        window.pinWatcher = el.scope().compiledScope.$watch('pins', function(pinList, oldValue) {\r\n            geoMarkers.clearLayers();\r\n            angular.forEach(pinList, function(pin) {\r\n                var marker = L.marker([ pin.lat, pin.lon ], {icon: markerIcon})\r\n                  .bindPopup(pin.data)\r\n                  .addTo(geoMarkers);\r\n            });\r\n        })\r\n    });}\r\n\r\nif (window.pinWatcher) {\r\n    // clear existing watcher otherwise we'll have duplicates\r\n    window.pinWatcher();\r\n}\r\n\r\n// ensure we only load the script once, seems to cause issues otherwise\r\nif (window.L) {\r\n    initMap2();\r\n} else {\r\n    console.log('Loading Leaflet library');\r\n    var sc = document.createElement('script');\r\n    sc.type = 'text/javascript';\r\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\r\n    sc.onload = initMap2;\r\n    sc.onerror = function(err) { alert(err); }\r\n    document.getElementsByTagName('head')[0].appendChild(sc);\r\n}\r\n</script>"
					}
				]
			},
			"apps": [
			],
			"jobName": "paragraph_1505317221611_1230418697",
			"id": "20170809-021534_2122057818",
			"dateCreated": "2017-09-13T08:40:21-0700",
			"status": "READY",
			"errorMessage": "",
			"progressUpdateIntervalMs": 500,
			"$$hashKey": "object:245"
		}
	],
	"name": "GDELT Testing",
	"id": "2CS2NWQ2Z",
	"angularObjects": {
		"2CQ45EQN3:shared_process": [
		],
		"2CRMR95VM:shared_process": [
		],
		"2CR7HU4K5:shared_process": [
		],
		"2CNZDBXB1:shared_process": [
		],
		"2CSSPJY6E:shared_process": [
		],
		"2CR9SXZU2:shared_process": [
		],
		"2CP794URS:shared_process": [
		],
		"2CS1T6Z8H:shared_process": [
		],
		"2CRRSU11A:shared_process": [
		],
		"2CQ6DYKSD:shared_process": [
		],
		"2CQUHQ6N9:shared_process": [
		],
		"2CSM6GRR3:shared_process": [
		],
		"2CRS36YKB:shared_process": [
		],
		"2CQDNDSDA:shared_process": [
		],
		"2CS7FBNVX:shared_process": [
		],
		"2CP5MBF4A:shared_process": [
		],
		"2CQQKN5PH:shared_process": [
		],
		"2CQDTRBTZ:shared_process": [
		],
		"2CR7ANRVS:shared_process": [
		]
	},
	"config": {
		"looknfeel": "default",
		"personalizedMode": "false"
	},
	"info": {
	}
}