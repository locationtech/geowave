{"paragraphs":[{"text":"%md\n## Welcome to the GeoWave KMeans GDELT Example (EMR Version).\n##### This is a live note - you can run the code yourself.\n\n### Setup\n<p>\nThe only prerequisite to running this example is increasing your shell interpreter's timeout.<br>\nGo to the <b>Interpreter</b> page, and scroll down to the <b>'sh'</b> section. Click on the <b>'edit'</b> button.<br><br>\nSet the <b>'shell.command.timeout.millisecs'</b> entry to <b>600000</b> (10 minutes).\n</p>\n\n### Execution\n<p>\nThe list of paragraphs below needs to be run sequentially.<br>\nStart at the top, and click the <b>play</b> button in each paragraph, waiting for completion.<br>\nEach paragraph is labeled and commented so you can tell what's happening. A paragraph will be marked<br>\nwith a <b>FINISHED</b> indicator next to the play button when it has run without error.<br><br>\nEnjoy!\n</p>","dateUpdated":"2017-11-27T21:31:40+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Welcome to the GeoWave KMeans GDELT Example (EMR Version).</h2>\n<h5>This is a live note - you can run the code yourself.</h5>\n<h3>Setup</h3>\n<p>\nThe only prerequisite to running this example is increasing your shell interpreter's timeout.<br>\nGo to the <b>Interpreter</b> page, and scroll down to the <b>'sh'</b> section. Click on the <b>'edit'</b> button.<br><br>\nSet the <b>'shell.command.timeout.millisecs'</b> entry to <b>600000</b> (10 minutes).\n</p>\n<h3>Execution</h3>\n<p>\nThe list of paragraphs below needs to be run sequentially.<br>\nStart at the top, and click the <b>play</b> button in each paragraph, waiting for completion.<br>\nEach paragraph is labeled and commented so you can tell what's happening. A paragraph will be marked<br>\nwith a <b>FINISHED</b> indicator next to the play button when it has run without error.<br><br>\nEnjoy!\n</p>\n"}]},"apps":[],"jobName":"paragraph_1511818300815_-532920230","id":"20170814-190601_1767735731","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2854"},{"title":"Get the Data","text":"%sh\n# download the GDELT data\ncd /mnt/tmp\nwget s3.amazonaws.com/geowave/latest/scripts/emr/quickstart/geowave-env.sh\nsource geowave-env.sh\nmkdir gdelt\ncd gdelt\nwget http://data.gdeltproject.org/events/md5sums\nfor file in `cat md5sums | cut -d' ' -f3 | grep \"^${TIME_REGEX}\"` ; \\\ndo wget http://data.gdeltproject.org/events/$file ; done\nmd5sum -c md5sums 2>&1 | grep \"^${TIME_REGEX}\"","dateUpdated":"2017-11-27T21:41:28+0000","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{},"enabled":true},"settings":{"params":{"TIME_REGEX":""},"forms":{"TIME_REGEX":{"name":"TIME_REGEX","defaultValue":"","hidden":false,"$$hashKey":"object:3749"}}},"apps":[],"jobName":"paragraph_1511818300815_-532920230","id":"20170913-084103_31433354","dateCreated":"2017-11-27T21:31:40+0000","status":"RUNNING","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2855","user":"anonymous","dateStarted":"2017-11-27T21:41:28+0000","results":{"msg":[{"data":"","type":"TEXT"},{"data":"","type":"TEXT"}]}},{"title":"Configure GeoWave Datastores and Ingest Data","text":"%sh\n\nsource /mnt/tmp/geowave-env.sh\n\n# configure geowave connection params for hbase stores \"gdelt\" and \"kmeans\"\ngeowave config addstore gdelt --gwNamespace geowave.gdelt -t hbase --zookeeper $HOSTNAME:2181\ngeowave config addstore kmeans --gwNamespace geowave.kmeans -t hbase --zookeeper $HOSTNAME:2181\n\n# configure a spatial index\ngeowave config addindex -t spatial gdelt-spatial --partitionStrategy round_robin --numPartitions $NUM_PARTITIONS\n\n# run the ingest for a 10x10 deg bounding box over Europe\ngeowave ingest localtogw /mnt/tmp/gdelt gdelt gdelt-spatial -f gdelt \\\n--gdelt.cql \"BBOX(geometry, 0, 50, 10, 60)\"","dateUpdated":"2017-11-27T21:41:11+0000","config":{"tableHide":false,"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170809-181755_1512238840","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2856"},{"title":"Configure GeoServer","text":"%sh\n# set up geoserver\ngeowave config geoserver \"$HOSTNAME:8000\"\n\n# add gdelt layer to geoserver\ngeowave gs addlayer gdelt -id gdeltevent\n\n# enable subsampling on the gdelt layer\ncd /mnt/tmp\nwget s3.amazonaws.com/geowave/latest/scripts/emr/quickstart/SubsamplePoints.sld\ngeowave gs addstyle SubsamplePoints -sld /mnt/tmp/SubsamplePoints.sld\ngeowave gs setls gdeltevent --styleName SubsamplePoints\n","dateUpdated":"2017-11-27T21:31:40+0000","config":{"tableHide":false,"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170913-084818_2077241202","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2857"},{"text":"%spark\n//Load Java environment vars, and convert to Scala map\nimport scala.collection.JavaConversions._\nval jenvironmentVars = System.getenv()\n//Use environmentVars map to pull environment vars for use in spark\nval environmentVars = mapAsScalaMap(jenvironmentVars)\nfor ((k,v) <- environmentVars) println(s\"key: $k, value: $v\")\n\n//Bind the hostname to the angular frontend to be used in map creation script\nz.angularBind(\"hostname\", environmentVars.getOrElse(\"HOSTNAME\", \"localhost\"))","user":"anonymous","dateUpdated":"2017-11-27T21:33:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818370003_671251883","id":"20171127-213250_865940522","dateCreated":"2017-11-27T21:32:50+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2858"},{"text":"%spark\n//Import classes from spark\nimport org.apache.spark.api.java.JavaSparkContext\n//DataFrame = type alias Dataset<Row>\nimport org.apache.spark.sql.DataFrame\nimport spark.implicits._\n\n//Import classes from geowave\nimport mil.nga.giat.geowave.datastore.hbase.operations.config.HBaseRequiredOptions\nimport mil.nga.giat.geowave.datastore.accumulo.operations.config.AccumuloRequiredOptions\nimport mil.nga.giat.geowave.analytic.spark.kmeans.KMeansRunner\nimport mil.nga.giat.geowave.core.store.query.QueryOptions\nimport mil.nga.giat.geowave.analytic.spark.GeoWaveRDD\nimport mil.nga.giat.geowave.analytic.spark.sparksql.SimpleFeatureDataFrame\nimport mil.nga.giat.geowave.core.index.ByteArrayId","user":"anonymous","dateUpdated":"2017-11-27T21:33:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818392082_-1105103141","id":"20171127-213312_624447354","dateCreated":"2017-11-27T21:33:12+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2859"},{"text":"%spark\n//Grab hostname from environment vars\nval hostname = environmentVars.getOrElse(\"HOSTNAME\", \"invalid-host\")\nprintln(s\"hostname= $hostname\")\n\n//Setup datastores\nval input_store = new HBaseRequiredOptions()\ninput_store.setZookeeper(hostname + \":2181\")\ninput_store.setGeowaveNamespace(\"geowave.gdelt\")\n\nval output_store = new HBaseRequiredOptions()\noutput_store.setZookeeper(hostname + \":2181\")\noutput_store.setGeowaveNamespace(\"geowave.kmeans\")\n\n//Create instances of store plugin options, and KMeansRunner\nval input_store_plugin = input_store.createPluginOptions()\nval output_store_plugin = output_store.createPluginOptions()\nval jsc = JavaSparkContext.fromSparkContext(sc)\nval kmeans_runner = new KMeansRunner()","user":"anonymous","dateUpdated":"2017-11-27T21:45:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818421392_633069797","id":"20171127-213341_1095676113","dateCreated":"2017-11-27T21:33:41+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2860"},{"text":"%sh\n#clear old potential runs\ngeowave remote clear kmeans","user":"anonymous","dateUpdated":"2017-11-27T21:36:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818467332_-650205703","id":"20171127-213427_1902869877","dateCreated":"2017-11-27T21:34:27+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2861"},{"title":"Run KMeans on GDELT Subset","text":"\n//set the appropriate properties of the runner\nkmeans_runner.setJavaSparkContext(JavaSparkContext.fromSparkContext(sc))\nkmeans_runner.setAdapterId(\"gdeltevent\")\nkmeans_runner.setInputDataStore(input_store_plugin)\nkmeans_runner.setOutputDataStore(output_store_plugin)\nkmeans_runner.setCqlFilter(\"BBOX(geometry, 0, 50, 10, 60)\")\nkmeans_runner.setCentroidTypeName(\"mycentroids\")\nkmeans_runner.setHullTypeName(\"myhulls\")\nkmeans_runner.setGenerateHulls(true)\nkmeans_runner.setComputeHullData(true)\n\n//execute the kmeans runner\nkmeans_runner.run()\n","dateUpdated":"2017-11-27T21:35:54+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170809-194032_1817638679","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2862"},{"title":"Add KMeans Results to GeoServer","text":"%sh\n\n# add the centroids layer\ngeowave gs addlayer kmeans -id mycentroids\ngeowave gs setls mycentroids --styleName point\n\n# add the hulls layer\ngeowave gs addlayer kmeans -id myhulls\ngeowave gs setls myhulls --styleName line","dateUpdated":"2017-11-27T21:31:40+0000","config":{"tableHide":false,"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170817-030121_1271873891","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2863"},{"text":"%angular\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" />\n<h3>GeoWave Leaflet Map</h3>\n<div type=\"hidden\" id=\"leaflet-input\" host={{hostname}} />\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n<script type=\"text/javascript\" id=\"leaflet-script\">\nfunction getHostname() {\n    var element = document.getElementById('leaflet-input');\n    return element.getAttribute('host');\n}\n\nfunction initMap() {\n    var map = L.map('map').setView([50.00, 10.00], 5);\n    \n    var host = getHostname();\n    mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    wholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';\n\n    var basemaps = {\n        OSM: L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n            maxZoom: 15,\n            minZoom: 2\n        }),\n        Satellite:L.tileLayer(\n            'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: '&copy; '+mapLink+', '+wholink,\n            maxZoom: 18,\n        })\n    };\n    \n    var overlays = {\n        GPX:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:gpxpoint',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansCentroids:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:mycentroids',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansHulls:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:myhulls',\n            format: 'image/png',\n            transparent: true\n        })\n    };\n\n    L.control.layers(basemaps, overlays).addTo(map);\n    \n    basemaps.OSM.addTo(map);\n}\n\nangular.element(document).ready(function () {\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://unpkg.com/leaflet@1.2.0/dist/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n});\n</script>\n","dateUpdated":"2017-11-27T21:48:25+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n<h3>GeoWave Leaflet Map</h3>\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n\nfunction initMap() {\n    var map = L.map('map').setView([50.00, 10.00], 5);\n    \n    var host='ec2-52-55-84-142.compute-1.amazonaws.com';\n    mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    wholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community';\n\n    var basemaps = {\n        OSM: L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n            maxZoom: 15,\n            minZoom: 2\n        }),\n        Satellite:L.tileLayer(\n            'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: '&copy; '+mapLink+', '+wholink,\n            maxZoom: 18,\n        }),\n        LANDSAT: L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:germany_mosaic',\n            format: 'image/jpeg'\n        })\n    };\n    \n    var overlays = {\n        GDELT:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:gdeltevent',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansCentroids:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:mycentroids',\n            format: 'image/png',\n            transparent: true\n        }),\n        \n        KMeansHulls:L.tileLayer.wms('http://'+host+':8000/geoserver/geowave/wms?', {\n            layers: 'geowave:myhulls',\n            format: 'image/png',\n            transparent: true\n        })\n    };\n\n    L.control.layers(basemaps, overlays).addTo(map);\n    \n    basemaps.OSM.addTo(map);\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170817-030613_874309201","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2864"},{"title":"Load KMeans Centroid CSV into DataFrame","text":"%spark\n\ndef create_dataframe(adapter_name : String) : DataFrame = {\n    //Create the dataframe and get a rdd for the output of kmeans\n    var sf_df = new SimpleFeatureDataFrame(spark)\n    val adapter_id = new ByteArrayId(adapter_name)\n    \n    var queryOptions = null : Option[QueryOptions]\n    val adapterIt = output_store_plugin.createAdapterStore().getAdapters()\n    while (adapterIt.hasNext()) {\n        val adapter = adapterIt.next()\n        if (adapter.getAdapterId().equals(adapter_id)) {\n            val adapterForQuery = adapter\n            queryOptions = Some(new QueryOptions(adapterForQuery))\n        }\n    }\n    val output_rdd = GeoWaveRDD.rddForSimpleFeatures(sc, output_store_plugin, null, queryOptions.getOrElse(null))\n    sf_df.init(output_store_plugin, adapter_id)\n    \n    return sf_df.getDataFrame(output_rdd)\n}\n\nvar df = create_dataframe(\"mycentroids\")\ndf.show()\n\n// Convert geom string to lat/long\ncase class KMeansRow(lat: Double, lon: Double, ClusterIndex : Int)\nval kmeansData = df.map(row => {\n    val geom_index = row.fieldIndex(\"geom\")\n    val geom = row.getString(geom_index)\n    val cluster_index = row.getInt(row.fieldIndex(\"ClusterIndex\"))\n    val lat_start = geom.lastIndexOf(\" \") + 1\n    val lat_end = geom.lastIndexOf(\")\")\n    val lat = geom.substring(lat_start, lat_end)\n    val lonStart = geom.indexOf(\"(\") + 1\n    val lonStop = geom.indexOf(\" \", lonStart)\n    val lon = geom.substring(lonStart, lonStop)\n    KMeansRow(lat=lat.toDouble, lon=lon.toDouble, ClusterIndex=cluster_index)\n    })\n// send the results to the front end (Leaflet map)\nz.angularBind(\"pins\", kmeansData.collect())\n// register a view for SQL queries\nkmeansData.createOrReplaceTempView(\"kmeans\")","dateUpdated":"2017-11-27T21:37:39+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170809-201803_119430460","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2865"},{"text":"%sql\nselect lat as Latitude, lon as Longitude from kmeans","user":"anonymous","dateUpdated":"2017-11-27T21:39:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511818677072_-1575821256","id":"20171127-213757_297409837","dateCreated":"2017-11-27T21:37:57+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2866"},{"text":"%angular\r\n\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\r\n<h3>Client-side Integration</h3>\r\n<div id=\"map2\" style=\"height: 600px; width: 100%\"></div>\r\n\r\n<script type=\"text/javascript\">\r\nfunction initMap2() {\r\n    var map2 = L.map('map2').setView([52.5, 13.4], 11);\r\n\r\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n        maxZoom: 15,\r\n        minZoom: 2\r\n    }).addTo(map2);\r\n\r\n    var geoMarkers = L.layerGroup().addTo(map2);\r\n    var markerIcon = L.icon({\r\n        iconUrl: 'https://openstationmap.org/0.2.0/client/leaflet/images/marker-icon.png',\r\n        iconSize: [24, 32],\r\n    });\r\n\r\n    var el = angular.element($('#map2').parent('.ng-scope'));\r\n    angular.element(el).ready(function() {\r\n        window.pinWatcher = el.scope().compiledScope.$watch('pins', function(pinList, oldValue) {\r\n            geoMarkers.clearLayers();\r\n            angular.forEach(pinList, function(pin) {\r\n                var marker = L.marker([ pin.lat, pin.lon ], {icon: markerIcon})\r\n                  .bindPopup(pin.data)\r\n                  .addTo(geoMarkers);\r\n            });\r\n        })\r\n    });}\r\n\r\nif (window.pinWatcher) {\r\n    // clear existing watcher otherwise we'll have duplicates\r\n    window.pinWatcher();\r\n}\r\n\r\n// ensure we only load the script once, seems to cause issues otherwise\r\nif (window.L) {\r\n    initMap2();\r\n} else {\r\n    console.log('Loading Leaflet library');\r\n    var sc = document.createElement('script');\r\n    sc.type = 'text/javascript';\r\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\r\n    sc.onload = initMap2;\r\n    sc.onerror = function(err) { alert(err); }\r\n    document.getElementsByTagName('head')[0].appendChild(sc);\r\n}\r\n</script>","dateUpdated":"2017-11-27T21:39:57+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":8,"editorMode":"ace/mode/undefined","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\r\n<h3>Client-side Integration</h3>\r\n<div id=\"map2\" style=\"height: 600px; width: 100%\"></div>\r\n\r\n<script type=\"text/javascript\">\r\nfunction initMap2() {\r\n    var map2 = L.map('map2').setView([52.5, 13.4], 11);\r\n\r\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n        maxZoom: 15,\r\n        minZoom: 2\r\n    }).addTo(map2);\r\n\r\n    var geoMarkers = L.layerGroup().addTo(map2);\r\n    var markerIcon = L.icon({\r\n        iconUrl: 'https://openstationmap.org/0.2.0/client/leaflet/images/marker-icon.png',\r\n        iconSize: [24, 32],\r\n    });\r\n\r\n    var el = angular.element($('#map2').parent('.ng-scope'));\r\n    angular.element(el).ready(function() {\r\n        window.pinWatcher = el.scope().compiledScope.$watch('pins', function(pinList, oldValue) {\r\n            geoMarkers.clearLayers();\r\n            angular.forEach(pinList, function(pin) {\r\n                var marker = L.marker([ pin.lat, pin.lon ], {icon: markerIcon})\r\n                  .bindPopup(pin.data)\r\n                  .addTo(geoMarkers);\r\n            });\r\n        })\r\n    });}\r\n\r\nif (window.pinWatcher) {\r\n    // clear existing watcher otherwise we'll have duplicates\r\n    window.pinWatcher();\r\n}\r\n\r\n// ensure we only load the script once, seems to cause issues otherwise\r\nif (window.L) {\r\n    initMap2();\r\n} else {\r\n    console.log('Loading Leaflet library');\r\n    var sc = document.createElement('script');\r\n    sc.type = 'text/javascript';\r\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\r\n    sc.onload = initMap2;\r\n    sc.onerror = function(err) { alert(err); }\r\n    document.getElementsByTagName('head')[0].appendChild(sc);\r\n}\r\n</script>"}]},"apps":[],"jobName":"paragraph_1511818300816_-522532009","id":"20170809-021534_2122057818","dateCreated":"2017-11-27T21:31:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2867"}],"name":"GeoWave GDELT Demo","id":"2D181GXRU","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}
