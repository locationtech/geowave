We make use of GeoServer render transformations to intelligently skip over rows if a pixel has already been painted, allowing for extremely dense data sets (we've tested with billions of points) to be rendered in real-time.  To make use of this render transform see example-slds/DecimatePoints.sld.

Additionally, we have a different render pipeline that performs the rendering at the tablets and then GeoServer composites the results.  It can be enabled by adding properties to a layer "Abstract"

You can enable various options in the layer abstract such as:
distributed-rendering=true
    enables strictly distributed rendering (ie. send the render request to the iterators) without any form of decimation

decimated-rendering=true
    enables the distributed decimated rendering (the rendering is done in the iterators and decimation is performed at the pixel level to skip iterating through all entries in cases of very dense data)

if decimated-rendering is enabled here are some more options available:
pixel-size=<int>
    it defaults to 1 but this allows you to set a larger decimation interval than a single pixel (it seems reasonable in practice to use about half of your point/line size, eg. if your point size is 6 pixels, skipping every 3 pixels will be an effective approximation) 

use-secondary-styles=false
    this disables decimating using secondary styles and only decimates according the last feature type style in the list (styles are rendered in order and the last style will render on top of all the other styles so if you are concerned with an accurate rendering you may not want to decimate when the other styles are rendered and only use the last style to decimate).  By default, this is enabled so decimation will result from any style being rendered.

count-threshold=<int>
    how many times do you render to a pixel before you decimate and skip that pixel?  By default it is merely 1 time, but perhaps you have some opacity and want that pixel to be rendered multiple times before skipping.

alpha-threshold=<decimal between 0 and 1>
    decimate only when a pixel exceeds some opacity.  By default this is not enabled but if a value is given and a value is given for count-threshold, the effect will be decimating if either condition is met (eg. you could set it so that perhaps decimate when opacity exceeds 0.8 but additionally as a sanity condition also decimate if its been rendered to more than 5 times)
    
    